<!DOCTYPE html>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>{{page_title}}</title>
		<script src="/fabric.js"></script>
		<script src="/fabric.canvasex.js"></script>
		<style type="text/css">
body {
	overflow-y: scroll;
}
.column-left {
	float: left;
	width: 77.25%;
	border-width: 0;
}
.column-right {
	float: right;
	width: 22.75%;
	border-width: 0;
}
.column-right label {
	width: 150px;
	display: inline-block;
}
.box-right {
  padding-left: 10px;
}
		</style>
	</head>
	<body>
		<div class="column-left">
			<canvas id="c"></canvas>
		</div>
		<div class="column-right">
      <div class="box-right">
  			<p><label for="fill">Text Color</label><input type="color" value="#000" id="fill"></p>
  			<p><label for="backgroundColor">Background Color</label><input type="color" value="#B0B0B0" id="backgroundColor"></p>
  			<p><label for="fontSize">Font Size</label><input type="number" min="1" value="40" id="fontSize"></p>
  			<p><label for="lineHeight">Line Height</label><input type="number" min="1" step="0.1" value="1" id="lineHeight"></p>
  			<p><label for="bold">Bold</label><input type="checkbox" id="bold"></p>
  			<p><label for="italic">Italic</label><input type="checkbox" id="italic"></p>
  			<p><label for="underline">Underline</label><input type="checkbox" id="underline"></p>
  			<p><input type="button" value="Insert" id="insertbox">
  			<input type="button" value="Delete" id="deletebox"></p>
				<form action="/comic/{{comic_id}}/page/{{page_index}}/update"	method="post">
					<label for="title">{{#lang}}{{Title}}{{/lang}}</label>
		      <input type="text" value="{{title}}" id="title" name="title" />
		      <label for="description">{{#lang}}{{Description}}{{/lang}}</label>
		      <textarea id="description" name="description">{{description}}</textarea>
        	<textarea id="json" name="content" readonly style="display: none">{{content}}</textarea>
  				<p><input type="submit" value="{{#lang}}{{Save}}{{/lang}}" id="save"></p>
				</form>
      </div>
		</div>
		<script>
var dragonComicEdit = (function() {
	var $ = function(id){return document.getElementById(id)};

	var canvas = new fabric.CanvasEx('c', null);

	var imgHeight, imgWidth;

	function resizeCanvas() {
		containerWidth = document.getElementsByClassName("column-left")[0].clientWidth;
		if (canvas.width != containerWidth) {
			var width = (containerWidth < imgWidth) ? containerWidth : imgWidth;
			var scaleMultiplier = width / imgWidth;
			if (scaleMultiplier > 1) scaleMultiplier = 1;
			canvas.setWidth(imgWidth * scaleMultiplier);
			canvas.setHeight(imgHeight * scaleMultiplier);
			canvas.setZoom(scaleMultiplier);
		}
	}

  function deserialization() {
		canvas.loadFromJSON($('json').value, function(o, object) {
			img = canvas.backgroundImage;
			imgWidth = img.width, imgHeight = img.height;
			resizeCanvas();
			canvas.renderAll.bind(canvas);
		});
	}

	function addTextbox(x = 100, y = 100) {
		var text = new fabric.Textbox('（填入文字）', {
			left: x, top: y, lockScalingX: false, lockSkewingX: false,
			fill: $('fill').value,
			backgroundColor: $('backgroundColor').value,
			fontSize: $('fontSize').value,
			lineHeight: $('lineHeight').value,
			fontWeight: $('bold').checked ? 'bold' : 'normal',
			fontStyle: $('italic').checked ? 'italic' : 'normal',
			textDecoration: $('underline').checked ? 'underline' : ''
		});
		canvas.add(text);
		canvas.renderAll();
	}

	function deleteObjs() {
		if (canvas.getActiveGroup()) {
			canvas.getActiveGroup().forEachObject(function(o){ canvas.remove(o) });
			canvas.discardActiveGroup().renderAll();
		} else if (canvas.getActiveObject() && !canvas.getActiveObject().isEditing) { // 防止用户在编辑时使用 Del 键导致对象被删除
			canvas.remove(canvas.getActiveObject());
		}
	}

	window.onkeyup = function(e) {
		var key = e.keyCode ? e.keyCode : e.which;
		switch (key) {
			case 46:
				deleteObjs();
				break;
		 }
	}
	canvas.on('mouse:dblclick', function (options) {
		if (!canvas.getActiveObject()) { // 防止用户在激活文本框时因双击而触发误操作
			var pointer = canvas.getPointer(options.e);
			var posX = pointer.x;
			var posY = pointer.y;
			addTextbox(posX, posY);
		}
	});
	canvas.on('object:selected', function() {
		obj = canvas.getActiveObject();
		if (obj) {
			$('fill').value = obj.fill;
			$('backgroundColor').value = obj.backgroundColor
			$('fontSize').value = obj.fontSize;
			$('lineHeight').value = obj.lineHeight;
			$('bold').checked = obj.fontWeight == 'bold' ? true : false;
			$('italic').checked = obj.fontStyle == 'italic' ? true : false;
			$('underline').checked = obj.textDecoration == 'underline' ? true : false;
		}
	});

	function observeValue(property, event) {
		$(property)[event] = function() {
			obj = canvas.getActiveObject();
			if (obj) {
				obj.set(property, this.value);
				canvas.renderAll();
			}
		}
	}

	observeValue('fill', 'oninput');
	observeValue('backgroundColor', 'oninput');
	observeValue('fontSize', 'oninput');
	observeValue('lineHeight', 'oninput');

	$('bold').onchange = function() {
		obj = canvas.getActiveObject();
		if (obj) {
			obj.set('fontWeight', this.checked ? 'bold' : 'normal');
			canvas.renderAll();
		}
	}

	$('italic').onchange = function() {
		obj = canvas.getActiveObject();
		if (obj) {
			obj.set('fontStyle', this.checked ? 'italic' : 'normal');
			canvas.renderAll();
		}
	}

	$('underline').onchange = function() {
		obj = canvas.getActiveObject();
		if (obj) {
			obj.set('textDecoration', this.checked ? 'underline' : '');
			canvas.renderAll();
		}
	}

	$('insertbox').onclick = function(event) {
		addTextbox();
	}

	$('deletebox').onclick = function(event) {
		deleteObjs();
	}

	$('save').onclick = function(event) {
		$('json').value = JSON.stringify(canvas);
	}

  window.onresize = resizeCanvas;

  deserialization();
})();
		</script>
	</body>
</html>
